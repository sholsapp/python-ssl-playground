#!/usr/bin/env python

"""Generate a simple TLS/SSL topology.

This tool creates X.509 certificates that can be used to setup a small host
topology that can then be used for various TLS/SSL tests and experiments.

Currently the small host topology looks like the following, where <color> is
either "RED" or "BLUE"::

  <color>-ROOT
    <color>-INTERMEDIATE_ALPHA
      <color>-INTERMEDIATE_ALPHA-SERVICE
      <color>-INTERMEDIATE_ALPHA-CLIENT
    <color>-INTERMEDIATE_BETA
      <color>-INTERMEDIATE_BETA-SERVICE
      <color>-INTERMEDIATE_BETA-CLIENT

"""

import argparse
import logging
import os

from bishop.x509 import make_certificate_authority, make_certificate_signing_request, make_certificate, make_pkey, make_serial
from OpenSSL import crypto


logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)


def write_key(path, name, obj):
  with open(os.path.join(path, name + '.key'), 'w') as fh:
    fh.write(crypto.dump_privatekey(crypto.FILETYPE_PEM, obj))


def write_cert(path, name, obj):
  with open(os.path.join(path, name + '.cert'), 'w') as fh:
    fh.write(crypto.dump_certificate(crypto.FILETYPE_PEM, obj))


def write_trust(path, name, *args):
  with open(os.path.join(path, name + '-ca-bundle.crt'), 'w') as fh:
    fh.write('\n'.join([crypto.dump_certificate(crypto.FILETYPE_PEM, cert) for cert in args]))


def make_tls_chain(path, dry_run, chain_name):

  root = '%s-ROOT' % chain_name
  root_key, root_cert = make_certificate_authority(CN=root)
  log.info('Made [%s] serial [%s]', root, root_cert.get_serial_number())

  if not dry_run:
    write_key(path, root, root_key)
    write_cert(path, root, root_cert)

  intermediates = []

  for intermediate in ['%s-INTERMEDIATE_ALPHA' % chain_name, '%s-INTERMEDIATE_BETA' % chain_name]:

    intermediate_key = make_pkey()
    csr = make_certificate_signing_request(intermediate_key, CN=intermediate)
    intermediate_cert = make_certificate(csr, root_key, root_cert, make_serial(), 0, 10 * 365 * 24 * 60 * 60, exts=[crypto.X509Extension('basicConstraints', True, 'CA:TRUE')])
    if not dry_run:
      write_key(path, intermediate, intermediate_key)
      write_cert(path, intermediate, intermediate_cert)
    intermediates.append(intermediate_cert)
    log.info('Made [%s] serial [%s] from serial [%s]', intermediate, intermediate_cert.get_serial_number(), root_cert.get_serial_number())

    server = '%s-SERVER' % intermediate
    server_key = make_pkey()
    csr = make_certificate_signing_request(server_key, CN=server)
    server_cert = make_certificate(csr, intermediate_key, intermediate_cert, make_serial(), 0, 10 * 365 * 24 * 60 * 60)
    if not dry_run:
      write_key(path, server, server_key)
      write_cert(path, server, server_cert)
    log.info('Made [%s] serial [%s] from serial [%s]', server, server_cert.get_serial_number(), intermediate_cert.get_serial_number())

    client = '%s-CLIENT' % intermediate
    client_key = make_pkey()
    csr = make_certificate_signing_request(client_key, CN=client)
    client_cert = make_certificate(csr, intermediate_key, intermediate_cert, make_serial(), 0, 10 * 365 * 24 * 60 * 60)
    if not dry_run:
      write_key(path, client, client_key)
      write_cert(path, client, client_cert)
    log.info('Made [%s] serial [%s] from serial [%s]', client, client_cert.get_serial_number(), intermediate_cert.get_serial_number())

  if not dry_run:
    write_trust(path, chain_name, root_cert, *intermediates)



def main():

  parser = argparse.ArgumentParser(description=__doc__)
  parser.add_argument('-o', '--output' , default=os.getcwd())
  parser.add_argument('-d', '--dry-run', action='store_true')
  args = parser.parse_args()

  for color in ['RED', 'BLUE']:
    make_tls_chain(args.output, args.dry_run, color)


if __name__ == '__main__':
  main()
